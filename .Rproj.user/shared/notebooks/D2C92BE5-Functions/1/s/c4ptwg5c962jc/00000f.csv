"0","auto_process <- function(raw_data, subject_1 = ""Donor"") {"
"0","  # Split joint modifiers"
"0","  split_data <- split_joint_modifiers(raw_data)"
"0",""
"0","  # Remove rows with any NA in Subject, Behavior, or Modifier columns"
"0","  split_data <- split_data[complete.cases(split_data[, c(""Subject"", ""Behavior"", ""Modifier"")]), ]"
"0",""
"0","  # Extract the unique behaviors, modifiers, and other subjects from the split_data"
"0","  unique_behaviors <- unique(split_data$Behavior)"
"0","  unique_modifiers <- unique(split_data$Modifier)"
"0","  unique_subjects <- unique(split_data$Subject)"
"0","  "
"0","  # Remove the ""Donor"" from the unique_subjects list"
"0","  unique_subjects <- unique_subjects[unique_subjects != subject_1]"
"0","  "
"0",""
"0","  # Initialize an empty data frame for the summary"
"0","  summary_df <- data.frame(Subject = character(), "
"0","                           Behavior_Subject1 = character(),"
"0","                           Behavior_Subject2 = character(),"
"0","                           Modifier = character(),"
"0","                           Synchronous = logical(),"
"0","                           Score = numeric(),"
"0","                           Max_Score = numeric(),"
"0","                           Frequency = numeric())"
"0","  "
"0","  # Iterate through the unique behaviors of subject_1"
"0","  for (behavior_1 in unique_behaviors) {"
"0","    # Iterate through all unique behaviors, modifiers, and other subjects for subject_2"
"0","    for (behavior_2 in unique_behaviors) {"
"0","      for (modifier in unique_modifiers) {"
"0","        for (subject_2 in unique_subjects) {"
"0","          "
"0","          # Filter the data"
"0","          filtered_data <- filter_function(split_data, subject_1, behavior_1, subject_2, behavior_2, modifier)"
"0",""
"0","          # Check if the filtered_data is empty and skip the current iteration if so"
"0","          if (nrow(filtered_data) == 0) {"
"0","            next"
"0","          }"
"0",""
"0","          # Calculate the interval duration"
"0","          duration_data <- duration_function(filtered_data, subject_1, behavior_1, subject_2, behavior_2, modifier)"
"0",""
"0","          # Organize the result"
"0","          result_reordered <- organize_result(duration_data, subject_1, behavior_1, subject_2, behavior_2, modifier)"
"0","          "
"0","          # Compute the score"
"0","          score_data <- compute_score(1, 1, result_reordered)"
"0",""
"0","          # Create the summary data frame"
"0",""
"0","          if (nrow(score_data) == 0){"
"0","             Max_Score_Async = 0"
"0","              Max_Score_Sync = 0"
"0","          } else {"
"0","              Max_Score_Async = max(score_data[score_data$Subject == subject_2 & score_data$Synchronous == F, ""score""])"
"0","              Max_Score_Sync = max(score_data[score_data$Subject == subject_2 & score_data$Synchronous == T, ""score""])"
"0","          }"
"0","          "
"0","          # if (nrow(score_data) == 0){"
"0","          #    Max_Score_Async = 0"
"0","          #    Max_Score_Sync = 0"
"0","          # } else {"
"0","          #   Max_Score_Async = max(score_data[score_data$Subject == subject_2 & score_data$Synchronous == F, ""score""])"
"0","          #   if (is.null(nrow(score_data[score_data$Subject == subject_2 & score_data$Synchronous == T, ""score""]))){ "
"0","          #     Max_Score_Sync = 0"
"0","          #   } else {"
"0","          #     Max_Score_Sync = max(score_data[score_data$Subject == subject_2 & score_data$Synchronous == T, ""score""])"
"0","          #   }"
"0","          # }"
"0",""
"0","          summary_row <- data.frame("
"0","            Subject = subject_2,"
"0","            Behavior_Subject1 = behavior_1,"
"0","            Behavior_Subject2 = behavior_2,"
"0","            Modifier = modifier,"
"0","            Synchronous = F,"
"0","            Score = sum(score_data[score_data$Subject == subject_2 & score_data$Synchronous == F, ""score""]),"
"0","            Max_Score = Max_Score_Async,"
"0","            Frequency = nrow(score_data[which(score_data$Synchronous == F), ])"
"0","          )"
"0","          "
"0","          summary_row_synchronous <- data.frame("
"0","            Subject = subject_2,"
"0","            Behavior_Subject1 = behavior_1,"
"0","            Behavior_Subject2 = behavior_2,"
"0","            Modifier = modifier,"
"0","            Synchronous = T,"
"0","            Score = sum(score_data[score_data$Subject == subject_2 & score_data$Synchronous== T, ""score""]),"
"0","            Max_Score = Max_Score_Sync,"
"0","            Frequency = nrow(score_data[which(score_data$Synchronous == T), ])"
"0","          )"
"0","          "
"0","          # Add the summary row to the summary_df"
"0","          summary_df <- rbind(summary_df, summary_row, summary_row_synchronous)"
"0","        }"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  # Handle -inf "
"0","  summary_df = do.call(data.frame, lapply(summary_df, function(x) replace(x, is.infinite(x), 0)))"
"0","  return(summary_df)"
"0","}"
"0",""
"0","# Call the auto_process function with the raw_data"
"0","summary_df <- auto_process(raw_data = data_behave) %>%"
"0"," rename(Donor_Behavior = Behavior_Subject1, Recipient_Behavior = Behavior_Subject2)"
"0","# summary_df <- summary_df %>% rename(Donor_Behavior = Behavior_Subject1, Recipient_Behavior = Behavior_Subject2)"
"0",""
"0",""
"0","# Check the resulting summary dataframe"
"0","head(summary_df)"
