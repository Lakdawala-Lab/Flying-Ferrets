"0","duration_function <- function(filtered_data, subject_1, subject_1_behave, subject_2, subject_2_behave, modifier) {"
"0","  # Initialize a variable to store the end time of the previous subject_1 behavior"
"0","  prev_subject_1_end_time <- NULL"
"0",""
"0","  # Initialize an empty data frame for the result"
"0","  result <- data.frame()"
"0",""
"0","  # Iterate through each row in the filtered_data"
"0","  for (i in 1:nrow(filtered_data)) {"
"0","    current_row <- filtered_data[i,]"
"0",""
"0","    ### SEAN UPDATE: ADD SYNCHRONOUS INDICATOR"
"0","    current_row$Synchronous <- F"
"0","  "
"0","    # If the current row is an observation of subject_1, update the end time and set the interval duration to 0"
"0","    if (current_row$Subject == subject_1 && current_row$Behavior == subject_1_behave && current_row$Modifier == modifier) {"
"0","      current_row$Interval_Duration <- 0"
"0","      result <- rbind(result, current_row)"
"0","      prev_subject_1_end_time <- current_row$End_Time"
"0","    }"
"0","    "
"0","    # If the current row is an observation of subject_2, calculate the interval duration"
"0","    if (current_row$Subject == subject_2 && current_row$Behavior == subject_2_behave && current_row$Modifier == modifier) {"
"0","      current_row$Interval_Duration <- current_row$Start_Time - prev_subject_1_end_time"
"0","      if (current_row$Interval_Duration < 0 | current_row$Interval_Duration == 0) {"
"0","        ### SEAN UPDATE: SET SYNCHRONOUS TO TRUE"
"0","        current_row$Synchronous <- T"
"0","        current_row$Interval_Duration <- 0"
"0","        ### SEAN UPDATE: SPLIT OVERLAPPING INTERACTONS INTO 2 INTERACTIONS: 1 SYNCHRONOUS, 1 ASYNCHRONOUS"
"0","        if (current_row$End_Time > prev_subject_1_end_time) {"
"0","          new_row <- current_row"
"0","          new_row$Synchronous <- F"
"0","          new_row$Start_Time <- prev_subject_1_end_time"
"0","          new_row$Duration <- new_row$End_Time - new_row$Start_Time"
"0","          current_row$End_Time <- prev_subject_1_end_time"
"0","          new_row$Interval_Duration <- 0"
"0","          current_row$Duration <- current_row$End_Time - current_row$Start_Time"
"0","          result <- rbind(result, new_row)"
"0","        }"
"0","      }"
"0","      else if (i > 1 && current_row$Subject == subject_2 && filtered_data[i-1,]$Subject == subject_2 & i != nrow(filtered_data)) {"
"0","        new_row <- current_row"
"0","        new_row$Synchronous <- T"
"0","        new_row$Start_Time <- filtered_data[i+1,]$Start_Time"
"0","        if (i < nrow(filtered_data) & current_row$End_Time > filtered_data[i+1,]$End_Time) {"
"0","          extra_row <- current_row"
"0","          current_row$End_Time <- new_row$Start_Time"
"0","          extra_row$Start_Time <- filtered_data[i+1,]$End_Time"
"0","          new_row$End_Time <- extra_row$Start_Time"
"0","          extra_row$Duration <- extra_row$End_Time - extra_row$Start_Time"
"0","          extra_row$Interval_Duration <- 0"
"0","          result <- rbind(result, extra_row)"
"0","        } else {"
"0","        current_row$End_Time <- new_row$Start_Time"
"0","        }"
"0","        current_row$Duration <- current_row$End_Time - current_row$Start_Time"
"0","        new_row$Duration <- new_row$End_Time - new_row$Start_Time"
"0","        new_row$Interval_Duration <- 0"
"0","        current_row <- new_row"
"0","        #result <- rbind(result, new_row)"
"0","      } "
"0","      result <- rbind(result, current_row)"
"0","    }"
"0","  }"
"0","  "
"0","  return(result)"
"0","}"
